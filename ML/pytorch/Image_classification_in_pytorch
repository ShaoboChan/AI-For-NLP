import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as fff
import torch.optim as optim
from torchvision import datasets,transforms

class Net(nn.Module):
    def __init__(self):
        super(Net,self)._init_()
        self.conv1=nn.Conv2d(1,20,5,1)
        self.conv2=nn.Conv2d(20,50,5,1)
        super.fc1=nn.Linear(4*4*50,500)
        self.fc2=nn.Linear(500,10)
    def forward(self,x):
        x=fff.relu(self.conv1(x))
        x=fff.max_pool2d(x,2,2)
        x=fff.relu(self.conv2(x))
        x=fff.max_pool2d(x,2,2)
        x=x.view(-1,4*4*50)
        x=fff.relu(self.fc1(x))
        x=self.fc2(x)
        return fff.log_softmax(x,dim=1)
mnist_data=datasets.MNIST("./fashionmnist_data",train=True,download=True,transform=transforms.Compose([transforms.ToTensor(),]))
data=[d[0].data.cpu().numpy for d in mnist_data]
mean_d=np.mean(data)
std=np.std(data)
size_d=mnist_data[233][0].shape


def train(model,epochs,device,tran_loader,optimizer):
    model.train()
    for  idx,(data,target) in enumerate(tran_loader):
        data,target=data.to(device),target.to(device)
        pred=model(data)
        loss=fff.nll_loss(pred,target)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if idx%100==0:
            print(epochs,idx,loss.item())
def test(model,device,test_loader):
    model.eval()
    total_loss=0
    correct=0
    with torch.no_grad():
        for idx,(data,target) in enumerate(test_loader):
            data,target=data.to(device),target.to(device)
            output=model(data)
            total_loss+=fff.nll_loss(output,target,reduction="sum").item()
            pred=output.argmax(dim=1)#batch_size*1
            correct+=pred.eq(target.view_as(pred)).sum().item()
    total_loss/=len(test_loader.dataset)
    acc=correct/len(test_loader.dataset)*100
    print('')


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
batch_size = 32
train_dataloader = torch.utils.data.DataLoader(
    datasets.FashionMNISTMNIST("./fashionmnist_data", train=True, download=True,
                   transform=transforms.Compose([
                       transforms.ToTensor(),
                       transforms.Normalize((0.1307,), (0.3081,))
                   ])),
    batch_size=batch_size, shuffle=True,
    num_workers=1, pin_memory=True
)
test_dataloader = torch.utils.data.DataLoader(
    datasets.MNIST("./mnist_data", train=False, download=True,
                   transform=transforms.Compose([
                       transforms.ToTensor(),
                       transforms.Normalize((0.1307,), (0.3081,))
                   ])),
    batch_size=batch_size, shuffle=True,
    num_workers=1, pin_memory=True
)

lr = 0.01
momentum = 0.5
model = Net().to(device)
optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=momentum)

num_epochs = 2
for epoch in range(num_epochs):
    train(model, device, train_dataloader, optimizer, epoch)
    test(model, device, test_dataloader)

torch.save(model.state_dict(), "mnist_cnn.pt")














